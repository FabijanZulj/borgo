Maps in structs

SOURCE:
struct Foo {
  bar: Map<String, Int>
}

fn borgo_main() {
  let bar = Map::new();
  let foo = Foo { bar };
  foo.bar.len().assert_eq(0);
}

OUTPUT:

---
package main

import borgo "borgo/runtime"

var _ = borgo.Unit

func make_Foo(arg_0 any) any {
	return Foo{arg_0}
}

type Foo struct {
	Bar any
}

func borgo_main() any {

	{

		var bar any = Map_new()

		var foo any = func(base any) any {
			data := base.(Foo)
			data.Bar = bar
			return data
		}(Foo{})

		return Debug_assert_eq(Map_len(foo.(Foo).Bar), 0)
	}
}
func Foo_equals(values ...any) any {
	return borgo.OverloadImpl("equals", values)
}
func Foo_to_hash(values ...any) any {
	return borgo.OverloadImpl("to_hash", values)
}
func Foo_to_string(values ...any) any {
	return borgo.OverloadImpl("to_string", values)
}
func pkg_user_init() {
	borgo.RegisterStruct("Foo", "Foo", []string{"bar"})
	borgo.RegisterMakeFunction("Foo", make_Foo)
	borgo.RegisterGlobalFunction("borgo_main", borgo_main)
}
