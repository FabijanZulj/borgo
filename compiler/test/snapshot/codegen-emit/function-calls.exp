Function calls

SOURCE:
fn foo(b: Bool, x: Int) -> Bool { b }
fn bar(x: Int) -> Int { x }

fn borgo_main() {
  foo(match 1 {
    1 => true,
    _ => false,
  }, bar(5))
  .assert_eq(true);

  ()
}

OUTPUT:

---
package main

import borgo "borgo/runtime"

var _ = borgo.Unit

func foo(b any, x any) any {

	{

		return b
	}
}
func bar(x any) any {

	{

		return x
	}
}
func borgo_main() any {

	{
		var var1 any
		_ = var1
		var var2 any
		_ = var2

		var4_subject := 1
		var5_matches := borgo.MatchNone

		if var5_matches != borgo.MatchOk {
			var5_matches = borgo.MatchNone

			if var5_matches != borgo.MatchErr && borgo.Ops.Eq(1, var4_subject).(bool) {
				var5_matches = borgo.MatchOk
			} else {
				var5_matches = borgo.MatchErr
			}
			_ = var4_subject

			if var5_matches == borgo.MatchOk {

				var2 = true
			}
		}

		if var5_matches != borgo.MatchOk {
			var5_matches = borgo.MatchNone

			if var5_matches != borgo.MatchErr {
				var5_matches = borgo.MatchOk /* wildcard */
			}
			_ = var4_subject

			if var5_matches == borgo.MatchOk {

				var2 = false
			}
		}

		Debug_assert_eq(foo(var2, bar(5)), true)

		return borgo.Unit
	}
}

func pkg_user_init() {
	borgo.RegisterGlobalFunction("foo", foo)
	borgo.RegisterGlobalFunction("bar", bar)
	borgo.RegisterGlobalFunction("borgo_main", borgo_main)
}
