Function calls

SOURCE:
fn foo(b: bool, x: int) -> bool { b }
fn bar(x: int) -> int { x }
fn baz() {}

fn main() {
    let val = foo(match 1 {
        1 => true
        _ => false
    }, bar(5))

    assert_eq(val, true)
}

OUTPUT:

---
package main

func foo(b bool, x int) bool {
	return b
}

func bar(x int) int {
	return x
}

func baz() {
}

func main() {
	var var3 bool
	var1_subject := 1
	var2_matches := 0

	if var2_matches != 2 {
		var2_matches = 0

		if var2_matches != 1 && 1 == var1_subject {
			var2_matches = 2
		} else {
			var2_matches = 1
		}
		_ = var1_subject

		if var2_matches == 2 {
			var3 = true
		}
	}

	if var2_matches != 2 {
		var2_matches = 0

		if var2_matches != 1 {
			var2_matches = 2 /* wildcard */
		}
		_ = var1_subject

		if var2_matches == 2 {
			var3 = false
		}
	}

	val := foo(var3, bar(5))

	assert_eq[bool](val, true)
}
