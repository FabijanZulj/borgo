Display trait

SOURCE:
struct Foo { a: Int, b: String }
struct Bar { baz: fn () -> Int }
enum Color { Blue, Red }

fn borgo_main() {
  to_string(1).inspect();
  to_string(false).inspect();
  to_string("yo").inspect();
  to_string('a').inspect();

  let x = Foo { a: 1, b: "yo" };
  to_string(x).inspect();

  to_string([1,2,3]).inspect();
  to_string(Ok(Color::Red)).inspect();
  to_string((1, 2.3)).inspect();
  to_string((1, false, "yo")).inspect();
  to_string(()).inspect();

  let m = Map::new()
    .insert("a", Color::Blue)
    .insert("b", Color::Red);
  to_string(m).inspect();

  to_string(5.to_ref()).inspect();

  to_string(Bar { baz: || 1 }).inspect();

  to_string([1,2,3].seq()).inspect();

  let s = Seq::infinite(0, |x| x + 1);
  to_string(s).inspect();

  to_string(Set::new()
    .insert("a")
    .insert("b"))
    .inspect();

  ()
}

OUTPUT:
"1"
"false"
""yo""
"'a'"
"Foo { a: 1, b: "yo" }"
"[1, 2, 3]"
"Result::Ok(Color::Red)"
"(1, 2.30)"
"(1, false, "yo")"
"()"
"{ "a" => Color::Blue, "b" => Color::Red }"
"<ref> 5"
"Bar { baz: <function> }"
"[1, 2, 3]"
"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]"
"["a", "b"]"

---
package main

import borgo "borgo/runtime"

var _ = borgo.Unit

func make_Foo(arg_0 any, arg_1 any) any {
	return Foo{arg_0, arg_1}
}
func make_Bar(arg_0 any) any {
	return Bar{arg_0.(func() any)}
}

var make_Color_Blue = Color_Blue{}
var make_Color_Red = Color_Red{}

type Foo struct {
	A any
	B any
}
type Bar struct {
	Baz func() any
}
type Color_Blue struct {
}
type Color_Red struct {
}
type Color any

func borgo_main() any {

	var var1_block any
	{
		var2 := 1
		var3 := to_string
		var4 := var3(var2)
		var5 := Debug_inspect(var4)
		_ = var5
		var6 := false
		var7 := to_string
		var8 := var7(var6)
		var9 := Debug_inspect(var8)
		_ = var9
		var10 := "yo"
		var11 := to_string
		var12 := var11(var10)
		var13 := Debug_inspect(var12)
		_ = var13
		var14 := 'a'
		var15 := to_string
		var16 := var15(var14)
		var17 := Debug_inspect(var16)
		_ = var17
		var18 := 1
		var19 := "yo"
		var20 := func(base any) any {
			data := base.(Foo)
			data.A = var18
			data.B = var19
			return data
		}(Foo{})
		var21 := var20
		var22 := borgo.Unit
		_ = var22
		var23 := var21
		var24 := to_string
		var25 := var24(var23)
		var26 := Debug_inspect(var25)
		_ = var26
		var27 := 1
		var28 := 2
		var29 := 3
		var30 := borgo.List(var27, var28, var29)
		var31 := to_string
		var32 := var31(var30)
		var33 := Debug_inspect(var32)
		_ = var33
		var34 := make_Color_Red
		var35 := make_Result_Ok
		var36 := var35(var34)
		var37 := to_string
		var38 := var37(var36)
		var39 := Debug_inspect(var38)
		_ = var39
		var40 := 1
		var41 := 2.3
		var42 := func(base any) any {
			data := base.(Tuple2)
			data.First = var40
			data.Second = var41
			return data
		}(Tuple2{})
		var43 := to_string
		var44 := var43(var42)
		var45 := Debug_inspect(var44)
		_ = var45
		var46 := 1
		var47 := false
		var48 := "yo"
		var49 := func(base any) any {
			data := base.(Tuple3)
			data.First = var46
			data.Second = var47
			data.Third = var48
			return data
		}(Tuple3{})
		var50 := to_string
		var51 := var50(var49)
		var52 := Debug_inspect(var51)
		_ = var52
		var53 := borgo.Unit
		var54 := to_string
		var55 := var54(var53)
		var56 := Debug_inspect(var55)
		_ = var56
		var57 := Map_new
		var58 := var57()
		var59 := "a"
		var60 := make_Color_Blue
		var61 := Map_insert
		var62 := var61(var58, var59, var60)
		var63 := "b"
		var64 := make_Color_Red
		var65 := Map_insert
		var66 := var65(var62, var63, var64)
		var67 := var66
		var68 := borgo.Unit
		_ = var68
		var69 := var67
		var70 := to_string
		var71 := var70(var69)
		var72 := Debug_inspect(var71)
		_ = var72
		var73 := 5
		var74 := Ref_to_ref
		var75 := var74(var73)
		var76 := to_string
		var77 := var76(var75)
		var78 := Debug_inspect(var77)
		_ = var78
		var80 := func() any {

			var79 := 1
			return var79
		}

		var81 := var80
		var82 := func(base any) any {
			data := base.(Bar)
			data.Baz = var81
			return data
		}(Bar{})
		var83 := to_string
		var84 := var83(var82)
		var85 := Debug_inspect(var84)
		_ = var85
		var86 := 1
		var87 := 2
		var88 := 3
		var89 := borgo.List(var86, var87, var88)
		var90 := List_seq
		var91 := var90(var89)
		var92 := to_string
		var93 := var92(var91)
		var94 := Debug_inspect(var93)
		_ = var94
		var95 := 0
		var100 := func(x any) any {

			var96 := x
			var97 := 1
			var98 := borgo.Ops.IAdd
			var99 := var98(var96, var97)
			return var99
		}

		var101 := var100
		var102 := Seq_infinite
		var103 := var102(var95, var101)
		var104 := var103
		var105 := borgo.Unit
		_ = var105
		var106 := var104
		var107 := to_string
		var108 := var107(var106)
		var109 := Debug_inspect(var108)
		_ = var109
		var110 := Set_new
		var111 := var110()
		var112 := "a"
		var113 := Set_insert
		var114 := var113(var111, var112)
		var115 := "b"
		var116 := Set_insert
		var117 := var116(var114, var115)
		var118 := to_string
		var119 := var118(var117)
		var120 := Debug_inspect(var119)
		_ = var120
		var121 := borgo.Unit
		var1_block = var121
	}
	return var1_block
}

func Color_equals(values ...any) any {
	return borgo.OverloadImpl("equals", values)
}
func Foo_equals(values ...any) any {
	return borgo.OverloadImpl("equals", values)
}
func Color_to_hash(values ...any) any {
	return borgo.OverloadImpl("to_hash", values)
}
func Foo_to_hash(values ...any) any {
	return borgo.OverloadImpl("to_hash", values)
}
func Bar_to_string(values ...any) any {
	return borgo.OverloadImpl("to_string", values)
}
func Color_to_string(values ...any) any {
	return borgo.OverloadImpl("to_string", values)
}
func Foo_to_string(values ...any) any {
	return borgo.OverloadImpl("to_string", values)
}
func pkg_user_init() {
	borgo.RegisterStruct("Foo", "Foo", []string{"a", "b"})
	borgo.RegisterMakeFunction("Foo", make_Foo)
	borgo.RegisterStruct("Bar", "Bar", []string{"baz"})
	borgo.RegisterMakeFunction("Bar", make_Bar)
	borgo.RegisterTypeConstructor("Color::Blue", "Color_Blue")
	borgo.RegisterMakeFunction("Color::Blue", make_Color_Blue)
	borgo.RegisterTypeConstructor("Color::Red", "Color_Red")
	borgo.RegisterMakeFunction("Color::Red", make_Color_Red)
	borgo.RegisterGlobalFunction("borgo_main", borgo_main)
}
