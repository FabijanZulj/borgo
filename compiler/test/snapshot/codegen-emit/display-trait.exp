Display trait

SOURCE:
struct Foo { a: Int, b: String }
struct Bar { baz: fn () -> Int }
enum Color { Blue, Red }

fn borgo_main() {
  to_string(1).inspect();
  to_string(false).inspect();
  to_string("yo").inspect();
  to_string('a').inspect();

  let x = Foo { a: 1, b: "yo" };
  to_string(x).inspect();

  to_string([1,2,3]).inspect();
  to_string(Ok(Color::Red)).inspect();
  to_string((1, 2.3)).inspect();
  to_string((1, false, "yo")).inspect();
  to_string(()).inspect();

  let m = Map::new()
    .insert("a", Color::Blue)
    .insert("b", Color::Red);
  to_string(m).inspect();

  to_string(5.to_ref()).inspect();

  to_string(Bar { baz: || 1 }).inspect();

  to_string([1,2,3].seq()).inspect();

  let s = Seq::infinite(0, |x| x + 1);
  to_string(s).inspect();

  to_string(Set::new()
    .insert("a")
    .insert("b"))
    .inspect();

  ()
}

OUTPUT:
"1"
"false"
""yo""
"'a'"
"Foo { a: 1, b: "yo" }"
"[1, 2, 3]"
"Result::Ok(Color::Red)"
"(1, 2.30)"
"(1, false, "yo")"
"()"
"{ "a" => Color::Blue, "b" => Color::Red }"
"<ref> 5"
"Bar { baz: <function> }"
"[1, 2, 3]"
"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]"
"["a", "b"]"

---
package main

import borgo "borgo/runtime"

var _ = borgo.Unit

func make_Foo(arg_0 any, arg_1 any) any {
	return Foo{arg_0, arg_1}
}
func make_Bar(arg_0 any) any {
	return Bar{arg_0.(func() any)}
}

var make_Color_Blue = Color_Blue{}
var make_Color_Red = Color_Red{}

type Foo struct {
	A any
	B any
}
type Bar struct {
	Baz func() any
}
type Color_Blue struct {
}
type Color_Red struct {
}
type Color any

func borgo_main() any {

	{

		Debug_inspect(to_string(1))

		Debug_inspect(to_string(false))

		Debug_inspect(to_string("yo"))

		Debug_inspect(to_string('a'))

		var x any = func(base any) any {
			data := base.(Foo)
			data.A = 1
			data.B = "yo"
			return data
		}(Foo{})

		Debug_inspect(to_string(x))

		Debug_inspect(to_string(borgo.List(1, 2, 3)))

		Debug_inspect(to_string(make_Result_Ok(make_Color_Red)))

		Debug_inspect(to_string(func(base any) any {
			data := base.(Tuple2)
			data.First = 1
			data.Second = 2.3
			return data
		}(Tuple2{})))

		Debug_inspect(to_string(func(base any) any {
			data := base.(Tuple3)
			data.First = 1
			data.Second = false
			data.Third = "yo"
			return data
		}(Tuple3{})))

		Debug_inspect(to_string(borgo.Unit))

		var m any = Map_insert(Map_insert(Map_new(), "a", make_Color_Blue), "b", make_Color_Red)

		Debug_inspect(to_string(m))

		Debug_inspect(to_string(Ref_to_ref(5)))

		Debug_inspect(to_string(func(base any) any {
			data := base.(Bar)
			data.Baz = func() any {

				{

					return 1
				}
			}
			return data
		}(Bar{})))

		Debug_inspect(to_string(List_seq(borgo.List(1, 2, 3))))

		var s any = Seq_infinite(0, func(x any) any {

			{

				return borgo.Ops.IAdd(x, 1)
			}
		})

		Debug_inspect(to_string(s))

		Debug_inspect(to_string(Set_insert(Set_insert(Set_new(), "a"), "b")))

		return borgo.Unit
	}
}
func Color_equals(values ...any) any {
	return borgo.OverloadImpl("equals", values)
}
func Foo_equals(values ...any) any {
	return borgo.OverloadImpl("equals", values)
}
func Color_to_hash(values ...any) any {
	return borgo.OverloadImpl("to_hash", values)
}
func Foo_to_hash(values ...any) any {
	return borgo.OverloadImpl("to_hash", values)
}
func Bar_to_string(values ...any) any {
	return borgo.OverloadImpl("to_string", values)
}
func Color_to_string(values ...any) any {
	return borgo.OverloadImpl("to_string", values)
}
func Foo_to_string(values ...any) any {
	return borgo.OverloadImpl("to_string", values)
}
func pkg_user_init() {
	borgo.RegisterStruct("Foo", "Foo", []string{"a", "b"})
	borgo.RegisterMakeFunction("Foo", make_Foo)
	borgo.RegisterStruct("Bar", "Bar", []string{"baz"})
	borgo.RegisterMakeFunction("Bar", make_Bar)
	borgo.RegisterTypeConstructor("Color::Blue", "Color_Blue")
	borgo.RegisterMakeFunction("Color::Blue", make_Color_Blue)
	borgo.RegisterTypeConstructor("Color::Red", "Color_Red")
	borgo.RegisterMakeFunction("Color::Red", make_Color_Red)
	borgo.RegisterGlobalFunction("borgo_main", borgo_main)
}
