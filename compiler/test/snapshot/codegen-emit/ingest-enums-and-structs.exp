Ingest enums and structs

SOURCE:
file: main.brg

enum Color { Red, Green }
struct Foo { name: String }
fn borgo_main() -> Int { 1 }

OUTPUT:

---
package main

import borgo "borgo/runtime"

var _ = borgo.Unit
var make_Color_Red = Color_Red{}
var make_Color_Green = Color_Green{}

func make_Foo(arg_0 any) any {
	return Foo{arg_0}
}

type Color_Red struct {
}
type Color_Green struct {
}
type Color any
type Foo struct {
	Name any
}

func borgo_main() any {

	var var1_block any
	{
		var2 := 1
		var1_block = var2
	}
	return var1_block
}

func pkg_user_init() {
	borgo.RegisterTypeConstructor("Color::Red", "Color_Red")
	borgo.RegisterMakeFunction("Color::Red", make_Color_Red)
	borgo.RegisterTypeConstructor("Color::Green", "Color_Green")
	borgo.RegisterMakeFunction("Color::Green", make_Color_Green)
	borgo.RegisterStruct("Foo", "Foo", []string{"name"})
	borgo.RegisterMakeFunction("Foo", make_Foo)
	borgo.RegisterGlobalFunction("borgo_main", borgo_main)
}
