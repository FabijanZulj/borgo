Impl blocks

SOURCE:
struct Foo { a: Int }

impl Foo {
  fn bar(self, x: Int) -> Int {
    self.a + x
  }
}

fn borgo_main() {
  let f = Foo { a: 1 };
  f.bar(5).assert_eq(6);
}

OUTPUT:

---
package main

import borgo "borgo/runtime"

var _ = borgo.Unit

func make_Foo(arg_0 any) any {
	return Foo{arg_0}
}

type Foo struct {
	A any
}

func Foo_bar(self any, x any) any {

	{

		return borgo.Ops.IAdd(self.(Foo).A, x)
	}
}
func borgo_main() any {

	{

		var f any = func(base any) any {
			data := base.(Foo)
			data.A = 1
			return data
		}(Foo{})

		return Debug_assert_eq(Foo_bar(f, 5), 6)
	}
}
func Foo_equals(values ...any) any {
	return borgo.OverloadImpl("equals", values)
}
func Foo_to_hash(values ...any) any {
	return borgo.OverloadImpl("to_hash", values)
}
func Foo_to_string(values ...any) any {
	return borgo.OverloadImpl("to_string", values)
}
func pkg_user_init() {
	borgo.RegisterStruct("Foo", "Foo", []string{"a"})
	borgo.RegisterMakeFunction("Foo", make_Foo)
	borgo.RegisterGlobalFunction("Foo::bar", Foo_bar)
	borgo.RegisterGlobalFunction("borgo_main", borgo_main)
}
