Impl blocks

SOURCE:
struct Foo { a: Int }

impl Foo {
  fn bar(self, x: Int) -> Int {
    self.a + x
  }
}

fn borgo_main() {
  let f = Foo { a: 1 };
  f.bar(5).assert_eq(6);
}

OUTPUT:

---
package main

import borgo "borgo/runtime"

var _ = borgo.Unit

func make_Foo(arg_0 any) any {
	return Foo{arg_0}
}

type Foo struct {
	A any
}

func Foo_bar(self any, x any) any {

	var var1_block any
	{
		var2 := self
		var3 := var2.(Foo).A
		var4 := x
		var5 := borgo.Ops.IAdd
		var6 := var5(var3, var4)
		var1_block = var6
	}
	return var1_block
}

func borgo_main() any {

	var var1_block any
	{
		var2 := 1
		var3 := func(base any) any {
			data := base.(Foo)
			data.A = var2
			return data
		}(Foo{})
		var4 := var3
		var5 := borgo.Unit
		_ = var5
		var6 := var4
		var7 := 5
		var8 := Foo_bar
		var9 := var8(var6, var7)
		var10 := 6
		var11 := Debug_assert_eq
		var12 := var11(var9, var10)
		var1_block = var12
	}
	return var1_block
}

func Foo_equals(values ...any) any {
	return borgo.OverloadImpl("equals", values)
}
func Foo_to_hash(values ...any) any {
	return borgo.OverloadImpl("to_hash", values)
}
func Foo_to_string(values ...any) any {
	return borgo.OverloadImpl("to_string", values)
}
func pkg_user_init() {
	borgo.RegisterStruct("Foo", "Foo", []string{"a"})
	borgo.RegisterMakeFunction("Foo", make_Foo)
	borgo.RegisterGlobalFunction("Foo::bar", Foo_bar)
	borgo.RegisterGlobalFunction("borgo_main", borgo_main)
}
