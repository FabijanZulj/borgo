Recursion across files

SOURCE:
file: a.brg
fn a(n: Int) -> Int {
  if n == 100 {
    return n
  }

  b(n + 10)
}

file: b.brg
fn b(n: Int) -> Int {
  if n == 200 {
    return n
  }

  a(n + 20)
}

file: main.brg
fn borgo_main() -> Int { a(40) }

OUTPUT:

---
package main

import borgo "borgo/runtime"

var _ = borgo.Unit

func borgo_main() any {

	var var1_block any
	{
		var2 := 40
		var3 := a
		var4 := var3(var2)
		var1_block = var4
	}
	return var1_block
}

func b(n any) any {

	var var1_block any
	{
		var3 := n
		var4 := 200
		var5 := borgo.Ops.Eq
		var6 := var5(var3, var4)
		var var2_result any

		if borgo.Ops.Eq(var6, true).(bool) {
			var var7_block any
			{
				var8 := n
				return var8
				var9 := borgo.Unit
				var7_block = var9
			}
			var2_result = var7_block
		} else {
			var10 := borgo.Unit
			var2_result = var10
		}
		var11 := var2_result
		_ = var11
		var12 := n
		var13 := 20
		var14 := borgo.Ops.IAdd
		var15 := var14(var12, var13)
		var16 := a
		var17 := var16(var15)
		var1_block = var17
	}
	return var1_block
}

func a(n any) any {

	var var1_block any
	{
		var3 := n
		var4 := 100
		var5 := borgo.Ops.Eq
		var6 := var5(var3, var4)
		var var2_result any

		if borgo.Ops.Eq(var6, true).(bool) {
			var var7_block any
			{
				var8 := n
				return var8
				var9 := borgo.Unit
				var7_block = var9
			}
			var2_result = var7_block
		} else {
			var10 := borgo.Unit
			var2_result = var10
		}
		var11 := var2_result
		_ = var11
		var12 := n
		var13 := 10
		var14 := borgo.Ops.IAdd
		var15 := var14(var12, var13)
		var16 := b
		var17 := var16(var15)
		var1_block = var17
	}
	return var1_block
}

func pkg_user_init() {
	borgo.RegisterGlobalFunction("borgo_main", borgo_main)
	borgo.RegisterGlobalFunction("b", b)
	borgo.RegisterGlobalFunction("a", a)
}
