Recursion across files

SOURCE:
file: a.brg
fn a(n: Int) -> Int {
  if n == 100 {
    return n
  }

  b(n + 10)
}

file: b.brg
fn b(n: Int) -> Int {
  if n == 200 {
    return n
  }

  a(n + 20)
}

file: main.brg
fn borgo_main() -> Int { a(40) }

OUTPUT:

---
package main

import borgo "borgo/runtime"

var _ = borgo.Unit

func borgo_main() any {

	{

		return a(40)
	}
}
func b(n any) any {

	{

		if borgo.Ops.Eq(borgo.Ops.Eq(n, 200), true).(bool) {

			return n

		}

		return a(borgo.Ops.IAdd(n, 20))
	}
}
func a(n any) any {

	{

		if borgo.Ops.Eq(borgo.Ops.Eq(n, 100), true).(bool) {

			return n

		}

		return b(borgo.Ops.IAdd(n, 10))
	}
}

func pkg_user_init() {
	borgo.RegisterGlobalFunction("borgo_main", borgo_main)
	borgo.RegisterGlobalFunction("b", b)
	borgo.RegisterGlobalFunction("a", a)
}
