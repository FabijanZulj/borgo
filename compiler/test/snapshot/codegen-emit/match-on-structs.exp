Match on structs

SOURCE:
struct Foo { a: Int }

fn borgo_main() {
    let x = Foo { a: 1 };
    let res = match x {
        Foo { a: 2 } => false,
        Foo { a: 1 } => true,
        Foo { a: _ } => false,
    };

    res.assert_eq(true);
}

OUTPUT:

---
package main

import borgo "borgo/runtime"

var _ = borgo.Unit

func make_Foo(arg_0 any) any {
	return Foo{arg_0}
}

type Foo struct {
	A any
}

func borgo_main() any {

	{

		var x any = func(base any) any {
			data := base.(Foo)
			data.A = 1
			return data
		}(Foo{})
		var var3 any
		_ = var3

		var5_subject := x
		var6_matches := borgo.MatchNone

		if var6_matches != borgo.MatchOk {
			var6_matches = borgo.MatchNone

			var7_match_pat := borgo.MatchNone

			if var7_match_pat != borgo.MatchErr && borgo.Ops.Eq(2, var5_subject.(Foo).A).(bool) {
				var7_match_pat = borgo.MatchOk
			} else {
				var7_match_pat = borgo.MatchErr
			}

			if var7_match_pat != borgo.MatchErr {
				var6_matches = borgo.MatchOk
			} else {
				var6_matches = borgo.MatchErr
			}

			_ = var5_subject

			if var6_matches == borgo.MatchOk {

				var3 = false
			}
		}

		if var6_matches != borgo.MatchOk {
			var6_matches = borgo.MatchNone

			var9_match_pat := borgo.MatchNone

			if var9_match_pat != borgo.MatchErr && borgo.Ops.Eq(1, var5_subject.(Foo).A).(bool) {
				var9_match_pat = borgo.MatchOk
			} else {
				var9_match_pat = borgo.MatchErr
			}

			if var9_match_pat != borgo.MatchErr {
				var6_matches = borgo.MatchOk
			} else {
				var6_matches = borgo.MatchErr
			}

			_ = var5_subject

			if var6_matches == borgo.MatchOk {

				var3 = true
			}
		}

		if var6_matches != borgo.MatchOk {
			var6_matches = borgo.MatchNone

			var11_match_pat := borgo.MatchNone
			if var11_match_pat != borgo.MatchErr {
				var11_match_pat = borgo.MatchOk /* wildcard */
			}

			if var11_match_pat != borgo.MatchErr {
				var6_matches = borgo.MatchOk
			} else {
				var6_matches = borgo.MatchErr
			}

			_ = var5_subject

			if var6_matches == borgo.MatchOk {

				var3 = false
			}
		}

		var res any = var3

		return Debug_assert_eq(res, true)
	}
}
func Foo_equals(values ...any) any {
	return borgo.OverloadImpl("equals", values)
}
func Foo_to_hash(values ...any) any {
	return borgo.OverloadImpl("to_hash", values)
}
func Foo_to_string(values ...any) any {
	return borgo.OverloadImpl("to_string", values)
}
func pkg_user_init() {
	borgo.RegisterStruct("Foo", "Foo", []string{"a"})
	borgo.RegisterMakeFunction("Foo", make_Foo)
	borgo.RegisterGlobalFunction("borgo_main", borgo_main)
}
