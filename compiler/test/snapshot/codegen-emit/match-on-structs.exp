Match on structs

SOURCE:
struct Foo { a: Int }

fn borgo_main() {
    let x = Foo { a: 1 };
    let res = match x {
        Foo { a: 2 } => false,
        Foo { a: 1 } => true,
        Foo { a: _ } => false,
    };

    res.assert_eq(true);
}

OUTPUT:

---
package main

import borgo "borgo/runtime"

var _ = borgo.Unit

func make_Foo(arg_0 any) any {
	return Foo{arg_0}
}

type Foo struct {
	A any
}

func borgo_main() any {

	var var1_block any
	{
		var2 := 1
		var3 := func(base any) any {
			data := base.(Foo)
			data.A = var2
			return data
		}(Foo{})
		var4 := var3
		var5 := borgo.Unit
		_ = var5
		var6 := var4
		var var7_result any
		var8_subject := var6
		var9_matches := 0

		if var9_matches != 2 {
			var9_matches = 0

			var10_match_pat := 0
			var11 := 2

			if var10_match_pat != 1 && borgo.Ops.Eq(var11, var8_subject.(Foo).A).(bool) {
				var10_match_pat = 2
			} else {
				var10_match_pat = 1
			}

			if var10_match_pat != 1 {
				var9_matches = 2
			} else {
				var9_matches = 1
			}

			_ = var8_subject

			if var9_matches == 2 {
				var12 := false
				var7_result = var12
			}
		}

		if var9_matches != 2 {
			var9_matches = 0

			var13_match_pat := 0
			var14 := 1

			if var13_match_pat != 1 && borgo.Ops.Eq(var14, var8_subject.(Foo).A).(bool) {
				var13_match_pat = 2
			} else {
				var13_match_pat = 1
			}

			if var13_match_pat != 1 {
				var9_matches = 2
			} else {
				var9_matches = 1
			}

			_ = var8_subject

			if var9_matches == 2 {
				var15 := true
				var7_result = var15
			}
		}

		if var9_matches != 2 {
			var9_matches = 0

			var16_match_pat := 0
			if var16_match_pat != 1 {
				var16_match_pat = 2 /* wildcard */
			}

			if var16_match_pat != 1 {
				var9_matches = 2
			} else {
				var9_matches = 1
			}

			_ = var8_subject

			if var9_matches == 2 {
				var17 := false
				var7_result = var17
			}
		}

		var18 := var7_result
		var19 := borgo.Unit
		_ = var19
		var20 := var18
		var21 := true
		var22 := Debug_assert_eq
		var23 := var22(var20, var21)
		var1_block = var23
	}
	return var1_block
}

func Foo_equals(values ...any) any {
	return borgo.OverloadImpl("equals", values)
}
func Foo_to_hash(values ...any) any {
	return borgo.OverloadImpl("to_hash", values)
}
func Foo_to_string(values ...any) any {
	return borgo.OverloadImpl("to_string", values)
}
func pkg_user_init() {
	borgo.RegisterStruct("Foo", "Foo", []string{"a"})
	borgo.RegisterMakeFunction("Foo", make_Foo)
	borgo.RegisterGlobalFunction("borgo_main", borgo_main)
}
