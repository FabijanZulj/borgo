Select statement

SOURCE:
fn foo(x: Sender<Int>) {
  x.send(3)
}

fn borgo_main() {
  let (x_send, x_recv) = Channel::new();
  let (_, y_recv) = Channel::new();

  spawn!((|| { x_send.send(5) })());

  let val = x_recv.recv();
  val.unwrap().assert_eq(5);

  spawn!(foo(x_send));

  match select!() {
    ChannelOp::Recv(x_recv, val) => val.unwrap().assert_eq(3),
    ChannelOp::Recv(y_recv, _) => unreachable!(),
  };
}

OUTPUT:

---
package main

import borgo "borgo/runtime"

var _ = borgo.Unit

func foo(x any) any {

	var var1_block any
	{
		var2 := x
		var3 := 3
		var4 := Sender_send
		var5 := var4(var2, var3)
		var1_block = var5
	}
	return var1_block
}

func borgo_main() any {

	var var1_block any
	{
		var2 := Channel_new
		var3 := var2()
		var4 := var3
		var5_match_pat := 0
		var6 := var4.(Tuple2).First
		var7 := var4.(Tuple2).Second

		if var5_match_pat != 1 {
			_ = 2
		} else {
			_ = 1
		}

		var8 := borgo.Unit
		_ = var8
		var9 := Channel_new
		var10 := var9()
		var11 := var10
		var12_match_pat := 0
		if var12_match_pat != 1 {
			var12_match_pat = 2 /* wildcard */
		}
		var13 := var11.(Tuple2).Second

		if var12_match_pat != 1 {
			_ = 2
		} else {
			_ = 1
		}

		var14 := borgo.Unit
		_ = var14
		var20 := func() any {

			var var15_block any
			{
				var16 := var6
				var17 := 5
				var18 := Sender_send
				var19 := var18(var16, var17)
				var15_block = var19
			}
			return var15_block
		}

		var21 := var20
		var22 := (var21)
		go var22()
		var23 := borgo.Unit
		_ = var23
		var24 := var7
		var25 := Receiver_recv
		var26 := var25(var24)
		var27 := var26
		var28 := borgo.Unit
		_ = var28
		var29 := var27
		var30 := Option_unwrap
		var31 := var30(var29)
		var32 := 5
		var33 := Debug_assert_eq
		var34 := var33(var31, var32)
		_ = var34
		var35 := var6
		var36 := foo
		go var36(var35)
		var37 := borgo.Unit
		_ = var37
		select {
		case var38_value, var39_more := <-var7.(chan any):
			var val any
			if var39_more {
				val = make_Option_Some(var38_value)
			} else {
				val = make_Option_None
			}
			var40 := val
			var41 := Option_unwrap
			var42 := var41(var40)
			var43 := 3
			var44 := Debug_assert_eq
			var45 := var44(var42, var43)
			_ = var45
		case var46_value, var47_more := <-var13.(chan any):

			if var47_more {
				_ = make_Option_Some(var46_value)
			} else {
				_ = make_Option_None
			}
			var48 := Debug_unreachable()
			_ = var48
		}
		var49 := borgo.Unit
		var1_block = var49
	}
	return var1_block
}

func pkg_user_init() {
	borgo.RegisterGlobalFunction("foo", foo)
	borgo.RegisterGlobalFunction("borgo_main", borgo_main)
}
