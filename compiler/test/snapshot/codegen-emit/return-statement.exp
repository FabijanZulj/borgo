Return statement

SOURCE:
fn foo() -> Int {
  let x = match 1 {
    1 => return 12,
    _ => 5,
  };

  if true {
    x + 40
  } else {
    return 9
  }

  return 4
}

fn borgo_main() {
  foo().assert_eq(12);
}

OUTPUT:

---
package main

import borgo "borgo/runtime"

var _ = borgo.Unit

func foo() any {

	var var1_block any
	{
		var2 := 1
		var var3_result any
		var4_subject := var2

		for var5_pattern := 0; var5_pattern < 2; var5_pattern++ {

			if var5_pattern == 0 {
				var6 := 1
				if !borgo.Ops.Eq(var6, var4_subject).(bool) {
					continue
				}
				_ = var4_subject

				var7 := 12
				return var7
				var8 := borgo.Unit
				var3_result = var8
				break
			}

			if var5_pattern == 1 {
				// wildcard
				_ = var4_subject

				var9 := 5
				var3_result = var9
				break
			}

		}
		var10 := var3_result
		var11 := borgo.Unit
		_ = var11
		var13 := true
		var var12_result any

		if borgo.Ops.Eq(var13, true).(bool) {
			var var14_block any
			{
				var15 := var10
				var16 := 40
				var17 := borgo.Ops.IAdd
				var18 := var17(var15, var16)
				var14_block = var18
			}
			var12_result = var14_block
		} else {
			var var19_block any
			{
				var20 := 9
				return var20
				var21 := borgo.Unit
				var19_block = var21
			}
			var12_result = var19_block
		}
		var22 := var12_result
		_ = var22
		var23 := 4
		return var23
		var24 := borgo.Unit
		var1_block = var24
	}
	return var1_block
}

func borgo_main() any {

	var var1_block any
	{
		var2 := foo
		var3 := var2()
		var4 := 12
		var5 := Debug_assert_eq
		var6 := var5(var3, var4)
		var1_block = var6
	}
	return var1_block
}

func pkg_user_init() {
	borgo.RegisterGlobalFunction("foo", foo)
	borgo.RegisterGlobalFunction("borgo_main", borgo_main)
}
