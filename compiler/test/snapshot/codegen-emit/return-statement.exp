Return statement

SOURCE:
fn foo() -> Int {
  let x = match 1 {
    1 => return 12,
    _ => 5,
  };

  if true {
    x + 40
  } else {
    return 9
  }

  return 4
}

fn borgo_main() {
  foo().assert_eq(12);
}

OUTPUT:

---
package main

import borgo "borgo/runtime"

var _ = borgo.Unit

func foo() any {

	{
		var var1 any
		_ = var1

		var3_subject := 1
		var4_matches := borgo.MatchNone

		if var4_matches != borgo.MatchOk {
			var4_matches = borgo.MatchNone

			if var4_matches != borgo.MatchErr && borgo.Ops.Eq(1, var3_subject).(bool) {
				var4_matches = borgo.MatchOk
			} else {
				var4_matches = borgo.MatchErr
			}
			_ = var3_subject

			if var4_matches == borgo.MatchOk {

				return 12

			}
		}

		if var4_matches != borgo.MatchOk {
			var4_matches = borgo.MatchNone

			if var4_matches != borgo.MatchErr {
				var4_matches = borgo.MatchOk /* wildcard */
			}
			_ = var3_subject

			if var4_matches == borgo.MatchOk {

				var1 = 5
			}
		}

		var x any = var1

		if borgo.Ops.Eq(true, true).(bool) {

			borgo.Ops.IAdd(x, 40)

		} else {

			return 9

		}

		return 4
	}
}
func borgo_main() any {

	{

		return Debug_assert_eq(foo(), 12)
	}
}

func pkg_user_init() {
	borgo.RegisterGlobalFunction("foo", foo)
	borgo.RegisterGlobalFunction("borgo_main", borgo_main)
}
