Concurrency

SOURCE:
use sync
use fmt

fn main() {
    let (sender, receiver) = Channel.new()

    fn foo(x: int) {
        sender.Send(x)
    }

    spawn (|| { sender.Send(5) })()

    let val = receiver.Recv()
    assertEq(val, 5)

    spawn foo(10)

    let val = receiver.Recv()
    assertEq(val, 10)

    {
        let desired = 5

        let wg: sync.WaitGroup = zeroValue()
        wg.Add(desired)

        let (done_tx, done_rx) = Channel.new()

        // receiver goroutine
        spawn (|| {
            let mut count = 0

            for n in receiver {
                count = count + n
            }

            assertEq(count, 10)
            fmt.Printf("count: %v", count)

            done_tx.Send(())
        })()

        let mut i = 0

        // start `desired` goroutines
        while (i < desired) {
            spawn (|i| {
                sender.Send(i)
                wg.Done()
            })(i)

          i = i + 1
        }

        wg.Wait()
        sender.Close() // close(sender)
        done_rx.Recv() // <-done
    }
}

OUTPUT:
count: 10
---
package main

import (
	"fmt"
	"sync"
)

func main() {
	var1 := Channel_new[int]()
	sender := var1.first
	receiver := var1.second
	var foo func(int)
	foo = func(x int) {
		Sender_Send[int](sender, x)
	}
	go (func() {
		Sender_Send[int](sender, 5)
	})()

	val := Receiver_Recv[int](receiver)

	assertEq[int](val, 5)
	go foo(10)

	val = Receiver_Recv[int](receiver)

	assertEq[int](val, 10)
	{

		desired := 5

		wg := zeroValue[sync.WaitGroup]()

		wg.Add(desired)

		var2 := Channel_new[struct{}]()
		done_tx := var2.first
		done_rx := var2.second
		go (func() {
			count := 0

			for n := range receiver {
				count = count + n
			}

			assertEq[int](count, 10)

			fmt.Printf("count: %v", count)

			Sender_Send[struct{}](done_tx, struct{}{})
		})()

		i := 0

		for i < desired {
			go (func(i int) {
				Sender_Send[int](sender, i)
				wg.Done()
			})(i)

			i = i + 1
		}
		wg.Wait()
		Sender_Close[int](sender)
		Receiver_Recv[struct{}](done_rx)
	}
}
