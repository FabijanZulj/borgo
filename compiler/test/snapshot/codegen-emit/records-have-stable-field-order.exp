Records have stable field order.

SOURCE:
struct Foo { x: Int, y: String }

fn borgo_main() {
  (1, "a", true).inspect();
  Foo { x: 1, y: "b" }.inspect();
  ()
}

OUTPUT:
(1, "a", true)
Foo { x: 1, y: "b" }

---
package main

import borgo "borgo/runtime"

var _ = borgo.Unit

func make_Foo(arg_0 any, arg_1 any) any {
	return Foo{arg_0, arg_1}
}

type Foo struct {
	X any
	Y any
}

func borgo_main() any {

	{

		Debug_inspect(func(base any) any {
			data := base.(Tuple3)
			data.First = 1
			data.Second = "a"
			data.Third = true
			return data
		}(Tuple3{}))

		Debug_inspect(func(base any) any {
			data := base.(Foo)
			data.X = 1
			data.Y = "b"
			return data
		}(Foo{}))

		return borgo.Unit
	}
}
func Foo_equals(values ...any) any {
	return borgo.OverloadImpl("equals", values)
}
func Foo_to_hash(values ...any) any {
	return borgo.OverloadImpl("to_hash", values)
}
func Foo_to_string(values ...any) any {
	return borgo.OverloadImpl("to_string", values)
}
func pkg_user_init() {
	borgo.RegisterStruct("Foo", "Foo", []string{"x", "y"})
	borgo.RegisterMakeFunction("Foo", make_Foo)
	borgo.RegisterGlobalFunction("borgo_main", borgo_main)
}
