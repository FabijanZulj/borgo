Equality with Eq trait

SOURCE:
struct Foo { a: Int, b: String }

struct Bar { c: List<Foo> }

fn borgo_main() {
  let x = Foo { a: 1, b: "yo" };
  let y = Foo { a: 1, b: "yo" };
  equals(x, y).assert_eq(true);
  equals(x, Foo { a: 2, ..y}).assert_eq(false);

  equals(Bar { c: [x, y] }, Bar { c: [x, y] }).assert_eq(true);
  equals(Bar { c: [x] }, Bar { c: [x, y] }).assert_eq(false);

  let xs = [x];
  let a = Bar { c: xs.push(y) };
  equals(a, Bar { c: [x, y] }).assert_eq(true);
}

OUTPUT:

---
package main

import borgo "borgo/runtime"

var _ = borgo.Unit

func make_Foo(arg_0 any, arg_1 any) any {
	return Foo{arg_0, arg_1}
}
func make_Bar(arg_0 any) any {
	return Bar{arg_0}
}

type Foo struct {
	A any
	B any
}
type Bar struct {
	C any
}

func borgo_main() any {

	{

		var x any = func(base any) any {
			data := base.(Foo)
			data.A = 1
			data.B = "yo"
			return data
		}(Foo{})

		var y any = func(base any) any {
			data := base.(Foo)
			data.A = 1
			data.B = "yo"
			return data
		}(Foo{})

		Debug_assert_eq(equals(x, y), true)

		Debug_assert_eq(equals(x, func(base any) any {
			data := base.(Foo)
			data.A = 2
			return data
		}(y)), false)

		Debug_assert_eq(equals(func(base any) any {
			data := base.(Bar)
			data.C = borgo.List(x, y)
			return data
		}(Bar{}), func(base any) any {
			data := base.(Bar)
			data.C = borgo.List(x, y)
			return data
		}(Bar{})), true)

		Debug_assert_eq(equals(func(base any) any {
			data := base.(Bar)
			data.C = borgo.List(x)
			return data
		}(Bar{}), func(base any) any {
			data := base.(Bar)
			data.C = borgo.List(x, y)
			return data
		}(Bar{})), false)

		var xs any = borgo.List(x)

		var a any = func(base any) any {
			data := base.(Bar)
			data.C = List_push(xs, y)
			return data
		}(Bar{})

		return Debug_assert_eq(equals(a, func(base any) any {
			data := base.(Bar)
			data.C = borgo.List(x, y)
			return data
		}(Bar{})), true)
	}
}
func Bar_equals(values ...any) any {
	return borgo.OverloadImpl("equals", values)
}
func Foo_equals(values ...any) any {
	return borgo.OverloadImpl("equals", values)
}
func Bar_to_hash(values ...any) any {
	return borgo.OverloadImpl("to_hash", values)
}
func Foo_to_hash(values ...any) any {
	return borgo.OverloadImpl("to_hash", values)
}
func Bar_to_string(values ...any) any {
	return borgo.OverloadImpl("to_string", values)
}
func Foo_to_string(values ...any) any {
	return borgo.OverloadImpl("to_string", values)
}
func pkg_user_init() {
	borgo.RegisterStruct("Foo", "Foo", []string{"a", "b"})
	borgo.RegisterMakeFunction("Foo", make_Foo)
	borgo.RegisterStruct("Bar", "Bar", []string{"c"})
	borgo.RegisterMakeFunction("Bar", make_Bar)
	borgo.RegisterGlobalFunction("borgo_main", borgo_main)
}
