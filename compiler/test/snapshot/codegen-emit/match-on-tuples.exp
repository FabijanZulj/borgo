Match on tuples

SOURCE:
fn borgo_main() {
    let res = match (1, "foo") {
        (3, _) => 5,
        (1, "bar") => 6,
        (x, "foo") => x,
        _ => unreachable!(),
    };

    res.assert_eq(1);

    let res = match () {
      () => 2,
    };

    res.assert_eq(2);
}

OUTPUT:

---
package main

import borgo "borgo/runtime"

var _ = borgo.Unit

func borgo_main() any {

	{
		var var1 any
		_ = var1

		var5_subject := func(base any) any {
			data := base.(Tuple2)
			data.First = 1
			data.Second = "foo"
			return data
		}(Tuple2{})
		var6_matches := borgo.MatchNone

		if var6_matches != borgo.MatchOk {
			var6_matches = borgo.MatchNone

			var7_match_pat := borgo.MatchNone

			if var7_match_pat != borgo.MatchErr && borgo.Ops.Eq(3, var5_subject.(Tuple2).First).(bool) {
				var7_match_pat = borgo.MatchOk
			} else {
				var7_match_pat = borgo.MatchErr
			}
			if var7_match_pat != borgo.MatchErr {
				var7_match_pat = borgo.MatchOk /* wildcard */
			}

			if var7_match_pat != borgo.MatchErr {
				var6_matches = borgo.MatchOk
			} else {
				var6_matches = borgo.MatchErr
			}

			_ = var5_subject

			if var6_matches == borgo.MatchOk {

				var1 = 5
			}
		}

		if var6_matches != borgo.MatchOk {
			var6_matches = borgo.MatchNone

			var9_match_pat := borgo.MatchNone

			if var9_match_pat != borgo.MatchErr && borgo.Ops.Eq(1, var5_subject.(Tuple2).First).(bool) {
				var9_match_pat = borgo.MatchOk
			} else {
				var9_match_pat = borgo.MatchErr
			}

			if var9_match_pat != borgo.MatchErr && borgo.Ops.Eq("bar", var5_subject.(Tuple2).Second).(bool) {
				var9_match_pat = borgo.MatchOk
			} else {
				var9_match_pat = borgo.MatchErr
			}

			if var9_match_pat != borgo.MatchErr {
				var6_matches = borgo.MatchOk
			} else {
				var6_matches = borgo.MatchErr
			}

			_ = var5_subject

			if var6_matches == borgo.MatchOk {

				var1 = 6
			}
		}

		if var6_matches != borgo.MatchOk {
			var6_matches = borgo.MatchNone

			var12_match_pat := borgo.MatchNone
			x := var5_subject.(Tuple2).First

			if var12_match_pat != borgo.MatchErr && borgo.Ops.Eq("foo", var5_subject.(Tuple2).Second).(bool) {
				var12_match_pat = borgo.MatchOk
			} else {
				var12_match_pat = borgo.MatchErr
			}

			if var12_match_pat != borgo.MatchErr {
				var6_matches = borgo.MatchOk
			} else {
				var6_matches = borgo.MatchErr
			}

			_ = var5_subject

			if var6_matches == borgo.MatchOk {

				var1 = x
			}
		}

		if var6_matches != borgo.MatchOk {
			var6_matches = borgo.MatchNone

			if var6_matches != borgo.MatchErr {
				var6_matches = borgo.MatchOk /* wildcard */
			}
			_ = var5_subject

			if var6_matches == borgo.MatchOk {

				var1 = Debug_unreachable()
			}
		}

		var res any = var1

		Debug_assert_eq(res, 1)
		var var17 any
		_ = var17

		var19_subject := borgo.Unit
		var20_matches := borgo.MatchNone

		if var20_matches != borgo.MatchOk {
			var20_matches = borgo.MatchNone

			if var20_matches != borgo.MatchErr {
				var20_matches = borgo.MatchOk /* Unit */
			}
			_ = var19_subject

			if var20_matches == borgo.MatchOk {

				var17 = 2
			}
		}

		res = var17

		return Debug_assert_eq(res, 2)
	}
}

func pkg_user_init() {
	borgo.RegisterGlobalFunction("borgo_main", borgo_main)
}
