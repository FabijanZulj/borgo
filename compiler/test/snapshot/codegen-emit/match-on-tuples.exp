Match on tuples

SOURCE:
fn borgo_main() {
    let res = match (1, "foo") {
        (3, _) => 5,
        (1, "bar") => 6,
        (x, "foo") => x,
        _ => unreachable!(),
    };

    res.assert_eq(1);

    let res = match () {
      () => 2,
    };

    res.assert_eq(2);
}

OUTPUT:

---
package main

import borgo "borgo/runtime"

var _ = borgo.Unit

func borgo_main() any {

	var var1_block any
	{
		var2 := 1
		var3 := "foo"
		var4 := func(base any) any {
			data := base.(Tuple2)
			data.First = var2
			data.Second = var3
			return data
		}(Tuple2{})
		var var5_result any
		var6_subject := var4
		var7_matches := 0

		if var7_matches != 2 {
			var7_matches = 0

			var8_match_pat := 0
			var9 := 3

			if var8_match_pat != 1 && borgo.Ops.Eq(var9, var6_subject.(Tuple2).First).(bool) {
				var8_match_pat = 2
			} else {
				var8_match_pat = 1
			}
			if var8_match_pat != 1 {
				var8_match_pat = 2 /* wildcard */
			}

			if var8_match_pat != 1 {
				var7_matches = 2
			} else {
				var7_matches = 1
			}

			_ = var6_subject

			if var7_matches == 2 {
				var10 := 5
				var5_result = var10
			}
		}

		if var7_matches != 2 {
			var7_matches = 0

			var11_match_pat := 0
			var12 := 1

			if var11_match_pat != 1 && borgo.Ops.Eq(var12, var6_subject.(Tuple2).First).(bool) {
				var11_match_pat = 2
			} else {
				var11_match_pat = 1
			}
			var13 := "bar"

			if var11_match_pat != 1 && borgo.Ops.Eq(var13, var6_subject.(Tuple2).Second).(bool) {
				var11_match_pat = 2
			} else {
				var11_match_pat = 1
			}

			if var11_match_pat != 1 {
				var7_matches = 2
			} else {
				var7_matches = 1
			}

			_ = var6_subject

			if var7_matches == 2 {
				var14 := 6
				var5_result = var14
			}
		}

		if var7_matches != 2 {
			var7_matches = 0

			var15_match_pat := 0
			var16 := var6_subject.(Tuple2).First
			var17 := "foo"

			if var15_match_pat != 1 && borgo.Ops.Eq(var17, var6_subject.(Tuple2).Second).(bool) {
				var15_match_pat = 2
			} else {
				var15_match_pat = 1
			}

			if var15_match_pat != 1 {
				var7_matches = 2
			} else {
				var7_matches = 1
			}

			_ = var6_subject

			if var7_matches == 2 {
				var18 := var16
				var5_result = var18
			}
		}

		if var7_matches != 2 {
			var7_matches = 0

			if var7_matches != 1 {
				var7_matches = 2 /* wildcard */
			}
			_ = var6_subject

			if var7_matches == 2 {
				var19 := Debug_unreachable()
				var5_result = var19
			}
		}

		var20 := var5_result
		var21 := borgo.Unit
		_ = var21
		var22 := var20
		var23 := 1
		var24 := Debug_assert_eq
		var25 := var24(var22, var23)
		_ = var25
		var26 := borgo.Unit
		var var27_result any
		var28_subject := var26
		var29_matches := 0

		if var29_matches != 2 {
			var29_matches = 0

			if var29_matches != 1 {
				var29_matches = 2 /* Unit */
			}
			_ = var28_subject

			if var29_matches == 2 {
				var30 := 2
				var27_result = var30
			}
		}

		var31 := var27_result
		var32 := borgo.Unit
		_ = var32
		var33 := var31
		var34 := 2
		var35 := Debug_assert_eq
		var36 := var35(var33, var34)
		var1_block = var36
	}
	return var1_block
}

func pkg_user_init() {
	borgo.RegisterGlobalFunction("borgo_main", borgo_main)
}
