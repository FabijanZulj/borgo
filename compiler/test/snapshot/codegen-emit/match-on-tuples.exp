Match on tuples

SOURCE:
fn main() {
    let res = match (1, "foo") {
        (3, _) => 5
        (1, "bar") => 6
        (x, "foo") => x
        _ => @unreachable()
    }

    assert_eq(res, 1)

    let res = match () {
      () => 2
    }

    assert_eq(res, 2)
}

OUTPUT:

---
package main

func main() {
	var res int

	var1_subject := Tuple2[int, string]{
		first:  1,
		second: "foo",
	}
	var2_matches := 0

	if var2_matches != 2 {
		var2_matches = 0

		var3_match_pat := 0

		if var3_match_pat != 1 && 3 == var1_subject.first {
			var3_match_pat = 2
		} else {
			var3_match_pat = 1
		}
		if var3_match_pat != 1 {
			var3_match_pat = 2 /* wildcard */
		}

		if var3_match_pat != 1 {
			var2_matches = 2
		} else {
			var2_matches = 1
		}

		_ = var1_subject

		if var2_matches == 2 {
			res = 5
		}
	}

	if var2_matches != 2 {
		var2_matches = 0

		var6_match_pat := 0

		if var6_match_pat != 1 && 1 == var1_subject.first {
			var6_match_pat = 2
		} else {
			var6_match_pat = 1
		}

		if var6_match_pat != 1 && "bar" == var1_subject.second {
			var6_match_pat = 2
		} else {
			var6_match_pat = 1
		}

		if var6_match_pat != 1 {
			var2_matches = 2
		} else {
			var2_matches = 1
		}

		_ = var1_subject

		if var2_matches == 2 {
			res = 6
		}
	}

	if var2_matches != 2 {
		var2_matches = 0

		var9_match_pat := 0
		x := var1_subject.first

		if var9_match_pat != 1 && "foo" == var1_subject.second {
			var9_match_pat = 2
		} else {
			var9_match_pat = 1
		}

		if var9_match_pat != 1 {
			var2_matches = 2
		} else {
			var2_matches = 1
		}

		_ = var1_subject

		if var2_matches == 2 {
			res = x
		}
	}

	if var2_matches != 2 {
		var2_matches = 0

		if var2_matches != 1 {
			var2_matches = 2 /* wildcard */
		}
		_ = var1_subject

		if var2_matches == 2 {
			res = Debug_unreachable[int]()
		}
	}

	assert_eq[int](res, 1)

	var13_subject := struct{}{}
	var14_matches := 0

	if var14_matches != 2 {
		var14_matches = 0

		if var14_matches != 1 {
			var14_matches = 2 /* Unit */
		}
		_ = var13_subject

		if var14_matches == 2 {
			res = 2
		}
	}

	assert_eq[int](res, 2)
}
