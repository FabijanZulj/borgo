Mutating vars

SOURCE:
fn foo(mut a: Int) -> Int {
  loop {
    if a > 5 { break; }
    a = a + 1;
  }

  a
}

fn borgo_main() {
  let mut x = 1;
  x = x + 3;
  x.assert_eq(4);

  {
    let x = 5;
    x.assert_eq(5);
  }

  foo(0).assert_eq(6);

  // TODO this doesn't type check :/
  // x = x + 6;
  // x.assert_eq(10);
}

OUTPUT:

---
package main

import borgo "borgo/runtime"

var _ = borgo.Unit

func foo(a any) any {

	{
		for {
			{

				if borgo.Ops.Eq(borgo.Ops.IGt(a, 5), true).(bool) {
					break

				}

				a = borgo.Ops.IAdd(a, 1)
			}
		}

		return a
	}
}
func borgo_main() any {

	{

		var x any = 1

		x = borgo.Ops.IAdd(x, 3)

		Debug_assert_eq(x, 4)
		{

			var x any = 5

			Debug_assert_eq(x, 5)
		}

		return Debug_assert_eq(foo(0), 6)
	}
}

func pkg_user_init() {
	borgo.RegisterGlobalFunction("foo", foo)
	borgo.RegisterGlobalFunction("borgo_main", borgo_main)
}
