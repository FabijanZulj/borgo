Control flow in loops

SOURCE:
fn main() {
  let mut n = 0;
  let mut check = false;

  loop {
    if n <= 5 {
      n = n + 1;
      assert_eq(check, false);
      continue;
    }

    check = true;
    break;
  }

  assert_eq(check, true);
  assert_eq(n, 6);

  n = 0;

  for x in [1,2,3] {
    if x == 2 {
      continue;
    }
    n = n + 1;
  }

  assert_eq(n, 2);
}

OUTPUT:

---
package main

func main() {
	n := 0

	check := false

	for {

		if n <= 5 {
			{

				n = n + 1

				assert_eq[bool](check, false)
				continue
			}
		}

		check = true
		break
	}

	assert_eq[bool](check, true)

	assert_eq[int](n, 6)

	n = 0

	for _, x := range []int{1, 2, 3} {

		if x == 2 {
			continue
		}

		n = n + 1
	}

	assert_eq[int](n, 2)
}
