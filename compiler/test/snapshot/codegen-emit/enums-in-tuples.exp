Enums in tuples

SOURCE:
enum Foo { Bar, Baz }

fn main() {
    let res = match (Bar, Baz) {
        (Bar, Bar) => 0,
        (Bar, Baz) => 2,
        _ => unreachable!(),
    };

    assert_eq(res, 2);
}

OUTPUT:

---
package main

func make_Foo_Bar() Foo {
	return Foo{tag: Foo_Bar}
}

func make_Foo_Baz() Foo {
	return Foo{tag: Foo_Baz}
}

type FooTag int

const (
	Foo_Bar FooTag = iota
	Foo_Baz
)

type Foo struct {
	tag FooTag
}

func main() {
	var res int

	var1_subject := Tuple2[Foo, Foo]{
		first:  make_Foo_Bar(),
		second: make_Foo_Baz(),
	}
	var2_matches := 0

	if var2_matches != 2 {
		var2_matches = 0

		var3_match_pat := 0
		var4_match_pat := 0

		if var4_match_pat != 1 && var1_subject.first.tag == Foo_Bar {
			var3_match_pat = 2
		} else {
			var3_match_pat = 1
		}

		var5_match_pat := 0

		if var5_match_pat != 1 && var1_subject.second.tag == Foo_Bar {
			var3_match_pat = 2
		} else {
			var3_match_pat = 1
		}

		if var3_match_pat != 1 {
			var2_matches = 2
		} else {
			var2_matches = 1
		}

		_ = var1_subject

		if var2_matches == 2 {
			res = 0
		}
	}

	if var2_matches != 2 {
		var2_matches = 0

		var6_match_pat := 0
		var7_match_pat := 0

		if var7_match_pat != 1 && var1_subject.first.tag == Foo_Bar {
			var6_match_pat = 2
		} else {
			var6_match_pat = 1
		}

		var8_match_pat := 0

		if var8_match_pat != 1 && var1_subject.second.tag == Foo_Baz {
			var6_match_pat = 2
		} else {
			var6_match_pat = 1
		}

		if var6_match_pat != 1 {
			var2_matches = 2
		} else {
			var2_matches = 1
		}

		_ = var1_subject

		if var2_matches == 2 {
			res = 2
		}
	}

	if var2_matches != 2 {
		var2_matches = 0

		if var2_matches != 1 {
			var2_matches = 2 /* wildcard */
		}
		_ = var1_subject

		if var2_matches == 2 {
			res = Debug_unreachable[int]()
		}
	}

	assert_eq[int](res, 2)
}
