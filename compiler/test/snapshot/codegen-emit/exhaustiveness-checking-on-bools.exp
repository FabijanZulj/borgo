Exhaustiveness checking on bools

SOURCE:
fn borgo_main() {
  let x = match false {
    true => unreachable!(),
    false => 2,
  };
  x.assert_eq(2);
}

OUTPUT:

---
package main

import borgo "borgo/runtime"

var _ = borgo.Unit

func borgo_main() any {

	{
		var var1 any
		_ = var1

		var3_subject := false
		var4_matches := borgo.MatchNone

		if var4_matches != borgo.MatchOk {
			var4_matches = borgo.MatchNone

			if var4_matches != borgo.MatchErr && borgo.Ops.Eq(true, var3_subject).(bool) {
				var4_matches = borgo.MatchOk
			} else {
				var4_matches = borgo.MatchErr
			}
			_ = var3_subject

			if var4_matches == borgo.MatchOk {

				var1 = Debug_unreachable()
			}
		}

		if var4_matches != borgo.MatchOk {
			var4_matches = borgo.MatchNone

			if var4_matches != borgo.MatchErr && borgo.Ops.Eq(false, var3_subject).(bool) {
				var4_matches = borgo.MatchOk
			} else {
				var4_matches = borgo.MatchErr
			}
			_ = var3_subject

			if var4_matches == borgo.MatchOk {

				var1 = 2
			}
		}

		var x any = var1

		return Debug_assert_eq(x, 2)
	}
}

func pkg_user_init() {
	borgo.RegisterGlobalFunction("borgo_main", borgo_main)
}
