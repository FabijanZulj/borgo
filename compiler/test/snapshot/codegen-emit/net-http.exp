Net http

SOURCE:
use fmt;
use net::http;
use sync;

struct Counter { m: sync::Mutex, count: int }

impl Counter {
  fn ServeHTTP(&mut self, w: http::ResponseWriter, r: &http::Request) {
    self.m.Lock();
    self.count = self.count + 1;
    fmt.Fprintf(w, "<h1>count %d</h1>", self.count);
    self.m.Unlock();
  }
}

fn main() {
  let c = Counter { m: zero_value(), count: 0 };
  http.Handle("/", &mut c);
  // http.ListenAndServe(":3333", zero_value());
  fmt.Println("ok");
}

OUTPUT:
ok

---
package main

import (
	"fmt"
	http "net/http"
	"sync"
)

type Counter struct {
	m     sync.Mutex
	count int
}

func (self *Counter) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	self.m.Lock()

	self.count = self.count + 1

	fmt.Fprintf(w, "<h1>count %d</h1>", self.count)
	self.m.Unlock()
}

func main() {
	c := Counter{
		m:     zero_value[sync.Mutex](),
		count: 0,
	}

	http.Handle("/", &c)

	fmt.Println("ok")
}
