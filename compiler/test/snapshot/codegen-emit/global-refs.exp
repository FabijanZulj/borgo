Global refs

SOURCE:
file: main.brg

const state: Ref<Int> = 5.to_ref();

fn foo() {
  state.mutate(|x| x + 80);
}

fn borgo_main() -> Int {
  foo();
  state.get()
}

OUTPUT:

---
package main

import borgo "borgo/runtime"

var _ = borgo.Unit
var state any

func init_const_state() any {

	return Ref_to_ref(5)
}

func foo() any {

	{

		return Ref_mutate(state, func(x any) any {

			{

				return borgo.Ops.IAdd(x, 80)
			}
		})
	}
}
func borgo_main() any {

	{
		foo()

		return Ref_get(state)
	}
}

func pkg_user_init() {
	state = init_const_state()
	borgo.RegisterGlobalFunction("foo", foo)
	borgo.RegisterGlobalFunction("borgo_main", borgo_main)
}
