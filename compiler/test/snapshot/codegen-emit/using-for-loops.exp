Using for loops.

SOURCE:
fn main() {
    {
        let mut sum = 0

        // this should iterate over values
        for x in [1, 2, 3] {
            sum = sum + x
        }

        assert_eq(sum, 6)
    }

    {
        let mut sum = 0

        for (i, x) in [1, 2, 3].enumerate() {
            sum = sum + i + x
        }

        assert_eq(sum, 9)
    }

    {
        let str = "asdf"
        let mut check = ""

        for c in str {
          check = check + string(c)
        }

        assert_eq(str, check)
        let mut check = ""

        for (index, c) in str.enumerate() {
          inspect(index)
          check = check + string(c)
        }

        assert_eq(str, check)
    }

    let mut n = 20

    match true {
        true => {
            n = 25
        }
        false => ()
    }

    loop {
        if n > 27 {
            break
        }
        inspect(n)
        n = n + 1
    }

    n = 0
    while n < 10 {
        n = n + 1
    }
    inspect(n)

    let m = Map.new()
    m.insert("a", 1)

    for (k, v) in m {
        inspect(k)
        inspect(v)
    }
}

OUTPUT:
0
1
2
3
25
26
27
10
a
1

---
package main

func main() {
	{

		sum := 0

		for _, x := range []int{1, 2, 3} {
			sum = sum + x
		}

		assert_eq[int](sum, 6)
	}
	{

		sum := 0

		for i, x := range Slice_enumerate[int]([]int{1, 2, 3}) {
			sum = sum + i + x
		}

		assert_eq[int](sum, 9)
	}
	{

		str := "asdf"

		check := ""

		for _, c := range str {
			check = check + string(c)
		}

		assert_eq[string](str, check)

		check = ""

		for index, c := range string_enumerate(str) {

			inspect[int](index)

			check = check + string(c)
		}

		assert_eq[string](str, check)
	}

	n := 20

	var1_subject := true
	var2_matches := 0

	if var2_matches != 2 {
		var2_matches = 0

		if var2_matches != 1 && true == var1_subject {
			var2_matches = 2
		} else {
			var2_matches = 1
		}
		_ = var1_subject

		if var2_matches == 2 {
			n = 25
		}
	}

	if var2_matches != 2 {
		var2_matches = 0

		if var2_matches != 1 && false == var1_subject {
			var2_matches = 2
		} else {
			var2_matches = 1
		}
		_ = var1_subject

		if var2_matches == 2 {
		}
	}

	for {

		if n > 27 {
			break
		}

		inspect[int](n)

		n = n + 1
	}

	n = 0

	for n < 10 {
		n = n + 1
	}

	inspect[int](n)

	m := Map_new[string, int]()

	Map_insert[string, int](m, "a", 1)

	for k, v := range m {

		inspect[string](k)

		inspect[int](v)
	}
}
