Using for loops.

SOURCE:
fn borgo_main() {
  for x in [1, 2, 3].seq() {
    x.inspect();
  }

  let mut n = 20;
  loop {
    if n > 22 { break; }
    n.inspect();
    n = n + 1;
  }
}

OUTPUT:
1
2
3
20
21
22

---
package main

import borgo "borgo/runtime"

var _ = borgo.Unit

func borgo_main() any {

	var var1_block any
	{
		var2 := 1
		var3 := 2
		var4 := 3
		var5 := borgo.List(var2, var3, var4)
		var6 := List_seq
		var7 := var6(var5)
		for !borgo.ValuesIsOfType(var7, "Seq::Nil") {
			var8 := borgo.GetArg(var7, 0)
			var9 := var8
			var10 := var9
			var11 := borgo.Unit
			var var12_block any
			{
				var13 := var10
				var14 := Debug_inspect(var13)
				var12_block = var14
			}

			var7 = borgo.GetArg(var7, 1).(func() any)()

			_ = var11
			_ = var12_block
		}
		var15 := borgo.Unit
		_ = var15
		var16 := 20
		var var17 any = var16
		var18 := borgo.Unit
		_ = var18
		for {
			var var19_block any
			{
				var21 := var17
				var22 := 22
				var23 := borgo.Ops.IGt
				var24 := var23(var21, var22)
				var var20_result any

				if borgo.Ops.Eq(var24, true).(bool) {
					var var25_block any
					{
						break
						var26 := borgo.Unit
						var25_block = var26
					}
					var20_result = var25_block
				} else {
					var27 := borgo.Unit
					var20_result = var27
				}
				var28 := var20_result
				_ = var28
				var29 := var17
				var30 := Debug_inspect(var29)
				_ = var30
				var31 := var17
				var32 := 1
				var33 := borgo.Ops.IAdd
				var34 := var33(var31, var32)
				var17 = var34
				var35 := borgo.Unit
				var19_block = var35
			}
			_ = var19_block
		}
		var36 := borgo.Unit
		var1_block = var36
	}
	return var1_block
}

func pkg_user_init() {
	borgo.RegisterGlobalFunction("borgo_main", borgo_main)
}
