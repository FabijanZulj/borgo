Nested if and match maintain context.

SOURCE:
fn foo() -> int {
  if 1 > 2 {
    1
  } else if 2 > 3  {
    2
  } else {
    3
  }
}

fn bar() -> int {
  match 1 {
    1 => match 2 {
      3 => 4
      _ => 5
    }
    _ => 9
  }
}

fn main() {
  assert_eq(foo(), 3)
  assert_eq(bar(), 5)
}

OUTPUT:

---
package main

func foo() int {
	var var1 int
	if 1 > 2 {
		var1 = 1
	} else {
		if 2 > 3 {
			var1 = 2
		} else {
			var1 = 3
		}
	}
	return var1
}

func bar() int {
	var var3 int
	var1_subject := 1
	var2_matches := 0

	if var2_matches != 2 {
		var2_matches = 0

		if var2_matches != 1 && 1 == var1_subject {
			var2_matches = 2
		} else {
			var2_matches = 1
		}
		_ = var1_subject

		if var2_matches == 2 {

			var5_subject := 2
			var6_matches := 0

			if var6_matches != 2 {
				var6_matches = 0

				if var6_matches != 1 && 3 == var5_subject {
					var6_matches = 2
				} else {
					var6_matches = 1
				}
				_ = var5_subject

				if var6_matches == 2 {
					var3 = 4
				}
			}

			if var6_matches != 2 {
				var6_matches = 0

				if var6_matches != 1 {
					var6_matches = 2 /* wildcard */
				}
				_ = var5_subject

				if var6_matches == 2 {
					var3 = 5
				}
			}

		}
	}

	if var2_matches != 2 {
		var2_matches = 0

		if var2_matches != 1 {
			var2_matches = 2 /* wildcard */
		}
		_ = var1_subject

		if var2_matches == 2 {
			var3 = 9
		}
	}

	return var3
}

func main() {
	assert_eq[int](foo(), 3)

	assert_eq[int](bar(), 5)
}
