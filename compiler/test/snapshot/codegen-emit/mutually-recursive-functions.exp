Mutually recursive functions

SOURCE:
file: main.brg

fn even(n: Int) -> Bool {
  if n == 0 {
    return true
  }

  odd(Int::abs(n) - 1)
}

fn odd(n: Int) -> Bool {
  if n == 0 {
    return false
  }

  even(Int::abs(n) - 1)
}

fn borgo_main() {
  even(10).assert_eq(true);
}

OUTPUT:

---
package main

import borgo "borgo/runtime"

var _ = borgo.Unit

func even(n any) any {

	{

		if borgo.Ops.Eq(borgo.Ops.Eq(n, 0), true).(bool) {

			return true

		}

		return odd(borgo.Ops.ISub(Int_abs(n), 1))
	}
}
func odd(n any) any {

	{

		if borgo.Ops.Eq(borgo.Ops.Eq(n, 0), true).(bool) {

			return false

		}

		return even(borgo.Ops.ISub(Int_abs(n), 1))
	}
}
func borgo_main() any {

	{

		return Debug_assert_eq(even(10), true)
	}
}

func pkg_user_init() {
	borgo.RegisterGlobalFunction("even", even)
	borgo.RegisterGlobalFunction("odd", odd)
	borgo.RegisterGlobalFunction("borgo_main", borgo_main)
}
