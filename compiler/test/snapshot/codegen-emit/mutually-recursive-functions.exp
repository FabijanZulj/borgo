Mutually recursive functions

SOURCE:
file: main.brg

fn even(n: Int) -> Bool {
  if n == 0 {
    return true
  }

  odd(Int::abs(n) - 1)
}

fn odd(n: Int) -> Bool {
  if n == 0 {
    return false
  }

  even(Int::abs(n) - 1)
}

fn borgo_main() {
  even(10).assert_eq(true);
}

OUTPUT:

---
package main

import borgo "borgo/runtime"

var _ = borgo.Unit

func even(n any) any {

	var var1_block any
	{
		var3 := n
		var4 := 0
		var5 := borgo.Ops.Eq
		var6 := var5(var3, var4)
		var var2_result any

		if borgo.Ops.Eq(var6, true).(bool) {
			var var7_block any
			{
				var8 := true
				return var8
				var9 := borgo.Unit
				var7_block = var9
			}
			var2_result = var7_block
		} else {
			var10 := borgo.Unit
			var2_result = var10
		}
		var11 := var2_result
		_ = var11
		var12 := n
		var13 := Int_abs
		var14 := var13(var12)
		var15 := 1
		var16 := borgo.Ops.ISub
		var17 := var16(var14, var15)
		var18 := odd
		var19 := var18(var17)
		var1_block = var19
	}
	return var1_block
}

func odd(n any) any {

	var var1_block any
	{
		var3 := n
		var4 := 0
		var5 := borgo.Ops.Eq
		var6 := var5(var3, var4)
		var var2_result any

		if borgo.Ops.Eq(var6, true).(bool) {
			var var7_block any
			{
				var8 := false
				return var8
				var9 := borgo.Unit
				var7_block = var9
			}
			var2_result = var7_block
		} else {
			var10 := borgo.Unit
			var2_result = var10
		}
		var11 := var2_result
		_ = var11
		var12 := n
		var13 := Int_abs
		var14 := var13(var12)
		var15 := 1
		var16 := borgo.Ops.ISub
		var17 := var16(var14, var15)
		var18 := even
		var19 := var18(var17)
		var1_block = var19
	}
	return var1_block
}

func borgo_main() any {

	var var1_block any
	{
		var2 := 10
		var3 := even
		var4 := var3(var2)
		var5 := true
		var6 := Debug_assert_eq
		var7 := var6(var4, var5)
		var1_block = var7
	}
	return var1_block
}

func pkg_user_init() {
	borgo.RegisterGlobalFunction("even", even)
	borgo.RegisterGlobalFunction("odd", odd)
	borgo.RegisterGlobalFunction("borgo_main", borgo_main)
}
