Functions in structs

SOURCE:
struct Foo {
  bar: fn (Int) -> Int
}

fn borgo_main() {
  let foo = Foo { bar: |x: Int| x + 2 };
  foo.bar(1).assert_eq(3);
}

OUTPUT:

---
package main

import borgo "borgo/runtime"

var _ = borgo.Unit

func make_Foo(arg_0 any) any {
	return Foo{arg_0.(func(any) any)}
}

type Foo struct {
	Bar func(any) any
}

func borgo_main() any {

	var var1_block any
	{
		var6 := func(x any) any {

			var2 := x
			var3 := 2
			var4 := borgo.Ops.IAdd
			var5 := var4(var2, var3)
			return var5
		}

		var7 := var6
		var8 := func(base any) any {
			data := base.(Foo)
			data.Bar = var7
			return data
		}(Foo{})
		var9 := var8
		var10 := borgo.Unit
		_ = var10
		var11 := 1
		var12 := var9
		var13 := var12.(Foo).Bar
		var14 := var13(var11)
		var15 := 3
		var16 := Debug_assert_eq
		var17 := var16(var14, var15)
		var1_block = var17
	}
	return var1_block
}

func pkg_user_init() {
	borgo.RegisterStruct("Foo", "Foo", []string{"bar"})
	borgo.RegisterMakeFunction("Foo", make_Foo)
	borgo.RegisterGlobalFunction("borgo_main", borgo_main)
}
