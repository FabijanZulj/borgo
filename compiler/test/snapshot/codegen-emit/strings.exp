Strings

SOURCE:
fn borgo_main() {
  "hello ".append("world").assert_eq("hello world");
  "a b c".split(" ").to_list().assert_eq(["a", "b", "c"]);
  "foobarbaz".slice(0, 6).assert_eq("foobar");
  "foobarbaz".slice(3, -3).assert_eq("bar");

  {
    let x = "foo".chars().to_list();
    x.len().assert_eq(3);
    x.get(0).assert_eq(Some('f'));
  }

  "foobarbaz".contains("bar").assert_eq(true);
  "abcd".index_of("c").assert_eq(Some(2));
  "abcd".index_of("z").assert_eq(None);

  'f'.to_int().assert_eq(102);
  'f'.to_string().assert_eq("'f'");
  ()
}

OUTPUT:

---
package main

import borgo "borgo/runtime"

var _ = borgo.Unit

func borgo_main() any {

	{

		Debug_assert_eq(String_append("hello ", "world"), "hello world")

		Debug_assert_eq(Seq_to_list(String_split("a b c", " ")), borgo.List("a", "b", "c"))

		Debug_assert_eq(String_slice("foobarbaz", 0, 6), "foobar")

		Debug_assert_eq(String_slice("foobarbaz", 3, borgo.Ops.INeg(3)), "bar")
		{

			var x any = Seq_to_list(String_chars("foo"))

			Debug_assert_eq(List_len(x), 3)

			Debug_assert_eq(List_get(x, 0), make_Option_Some('f'))
		}

		Debug_assert_eq(String_contains("foobarbaz", "bar"), true)

		Debug_assert_eq(String_index_of("abcd", "c"), make_Option_Some(2))

		Debug_assert_eq(String_index_of("abcd", "z"), make_Option_None)

		Debug_assert_eq(Char_to_int('f'), 102)

		Debug_assert_eq(Char_to_string('f'), "'f'")

		return borgo.Unit
	}
}

func pkg_user_init() {
	borgo.RegisterGlobalFunction("borgo_main", borgo_main)
}
