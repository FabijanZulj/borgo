Slice type

SOURCE:
fn foo() -> [int] { [1, 2] }

OUTPUT:
Fn_#1,1, Ident("foo", 3)#1,4, LParen#1,7, RParen#1,8, Arrow#1,10, LBrack#1,13, Ident("int", 3)#1,14, RBrack#1,17, LCurly#1,19, LBrack#1,21, Int("1", 1)#1,22, Comma#1,23, Int("2", 1)#1,25, RBrack#1,26, RCurly#1,28, EOF#1,29
---
No errors.
---
{
  "Closure": {
    "fun": {
      "name": "foo",
      "generics": [],
      "args": [],
      "ret": {
        "Var": -1
      },
      "ann": {
        "Con": {
          "name": "Slice",
          "args": [
            {
              "Con": {
                "name": "int",
                "args": []
              }
            }
          ]
        }
      },
      "body": {
        "Block": {
          "stmts": [
            {
              "Literal": {
                "lit": {
                  "Slice": [
                    {
                      "Literal": {
                        "lit": {
                          "Int": 1
                        }
                      }
                    },
                    {
                      "Literal": {
                        "lit": {
                          "Int": 2
                        }
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "bounded_ty": {
        "generics": []
      }
    },
    "kind": "Inline"
  }
}