Loop statements

SOURCE:
{
    for i in [1,2].enumerate() {
        foo(i)
    }

    while x > y {
        // keep going
        continue
    }

    loop {
        i = i + 1
        break
    }
}

OUTPUT:
LCurly#1,1, For#2,5, Ident("i", 1)#2,9, In_#2,11, LBrack#2,14, Int("1", 1)#2,15, Comma#2,16, Int("2", 1)#2,17, RBrack#2,18, Dot#2,19, Ident("enumerate", 9)#2,20, LParen#2,29, RParen#2,30, LCurly#2,32, Ident("foo", 3)#3,9, LParen#3,12, Ident("i", 1)#3,13, RParen#3,14, Semicolon#3,15, RCurly#4,5, Semicolon#4,6, While#6,5, Ident("x", 1)#6,11, RAngle#6,13, Ident("y", 1)#6,15, LCurly#6,17, Comment#7,9, Continue#8,9, Semicolon#8,17, RCurly#9,5, Semicolon#9,6, Loop#11,5, LCurly#11,10, Ident("i", 1)#12,9, Eq#12,11, Ident("i", 1)#12,13, Plus#12,15, Int("1", 1)#12,17, Semicolon#12,18, Break#13,9, Semicolon#13,14, RCurly#14,5, Semicolon#14,6, RCurly#15,1, EOF#15,2
---
No errors.
---
{
  "Block": {
    "stmts": [
      {
        "Loop": {
          "kind": {
            "WithCondition": {
              "binding": {
                "pat": {
                  "Type": {
                    "ident": "i",
                    "is_mut": false,
                    "ann": "Unknown"
                  }
                },
                "ann": "Unknown"
              },
              "expr": {
                "Call": {
                  "func": {
                    "FieldAccess": {
                      "expr": {
                        "Literal": {
                          "lit": {
                            "Slice": [
                              {
                                "Literal": {
                                  "lit": {
                                    "Int": 1
                                  }
                                }
                              },
                              {
                                "Literal": {
                                  "lit": {
                                    "Int": 2
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "field": "enumerate"
                    }
                  },
                  "args": []
                }
              }
            }
          },
          "body": {
            "Block": {
              "stmts": [
                {
                  "Call": {
                    "func": {
                      "Var": {
                        "value": "foo",
                        "generics_instantiated": []
                      }
                    },
                    "args": [
                      {
                        "Var": {
                          "value": "i",
                          "generics_instantiated": []
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      {
        "Loop": {
          "kind": {
            "While": {
              "expr": {
                "Binary": {
                  "op": "Gt",
                  "left": {
                    "Var": {
                      "value": "x",
                      "generics_instantiated": []
                    }
                  },
                  "right": {
                    "Var": {
                      "value": "y",
                      "generics_instantiated": []
                    }
                  }
                }
              }
            }
          },
          "body": {
            "Block": {
              "stmts": [
                {
                  "Flow": {
                    "kind": "Continue"
                  }
                }
              ]
            }
          }
        }
      },
      {
        "Loop": {
          "kind": "NoCondition",
          "body": {
            "Block": {
              "stmts": [
                {
                  "VarUpdate": {
                    "target": {
                      "Var": {
                        "value": "i",
                        "generics_instantiated": []
                      }
                    },
                    "value": {
                      "Binary": {
                        "op": "Add",
                        "left": {
                          "Var": {
                            "value": "i",
                            "generics_instantiated": []
                          }
                        },
                        "right": {
                          "Literal": {
                            "lit": {
                              "Int": 1
                            }
                          }
                        }
                      }
                    }
                  }
                },
                {
                  "Flow": {
                    "kind": "Break"
                  }
                }
              ]
            }
          }
        }
      }
    ]
  }
}